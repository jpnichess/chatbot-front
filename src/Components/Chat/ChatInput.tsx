// Importa hooks essenciais do React
import { useState, useRef, useEffect } from "react";

// Importa a autentica√ß√£o do Firebase (para verificar se o usu√°rio est√° logado)
import { auth } from "../Firebase/FirebaseConfig.js";

// Importa o estilo espec√≠fico do input do chat
import "./chatInput.scss";

// Componente ChatInput: campo de texto e bot√£o para enviar mensagens
// Recebe como propriedade (prop) uma fun√ß√£o 'onSend', que envia a mensagem ao Chat
function ChatInput({ onSend }: { onSend: (msg: string) => void }) {
  // Estado que guarda o texto digitado pelo usu√°rio
  const [input, setInput] = useState("");

  // Refer√™ncia ao elemento <textarea>, usada para ajustar o tamanho dinamicamente
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Obt√©m o usu√°rio atual do Firebase Authentication
  const user = auth.currentUser;

  // üîÑ Ajusta automaticamente a altura do textarea conforme o texto cresce
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto"; // reseta antes de recalcular
      textareaRef.current.style.height =
        textareaRef.current.scrollHeight + "px"; // ajusta conforme o conte√∫do
    }
  }, [input]); // √© executado sempre que o valor de 'input' muda

  // üöÄ Envia a mensagem digitada
  const handleSubmit = () => {
    const trimmed = input.trim(); // remove espa√ßos extras
    if (!trimmed) return false; // n√£o envia mensagens vazias

    // Garante que o usu√°rio esteja logado antes de enviar
    if (!user) {
      alert("Entre com sua conta do Google para enviar sua pergunta.");
      return false;
    }

    // Chama a fun√ß√£o passada pelo componente pai (Chat)
    onSend(trimmed);
    setInput(""); // limpa o campo de texto ap√≥s enviar
    return true;
  };

  // ‚å®Ô∏è Permite enviar mensagem ao pressionar Enter (sem Shift)
  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault(); // impede quebra de linha
      handleSubmit(); // envia a mensagem
    }
  };

  // üì§ Captura o evento do formul√°rio (ex: clique no bot√£o "Enviar")
  const onFormSubmit = (e: React.FormEvent) => {
    e.preventDefault(); // evita recarregar a p√°gina
    handleSubmit();
  };

  // üß© Renderiza√ß√£o do componente
  return (
    <div className="user-part">
      <form onSubmit={onFormSubmit} className="user-form">
        {/* Campo de texto (textarea) com redimensionamento autom√°tico */}
        <textarea
          ref={textareaRef}
          className="user-input"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Digite sua mensagem..."
          rows={1}
          onKeyDown={handleKeyDown}
        />

        {/* Bot√£o para enviar a mensagem manualmente */}
        <button type="submit" className="send-button">
          Enviar
        </button>
      </form>
    </div>
  );
}

// Exporta o componente para uso no Chat principal
export default ChatInput;
